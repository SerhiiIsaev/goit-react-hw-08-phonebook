{"version":3,"file":"static/js/392.77048cde.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactItem/ContactItem.module.css?fb47","components/Phonebook/ContactItem/ContactItem.jsx","components/Phonebook/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Phonebook/Filter/Filter.module.css?44e1","components/Phonebook/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","webpack://react-homework-template/./src/components/Phonebook/ContactForm/ContactForm.module.css?f727","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from '../../../redux/contacts/contactsOperations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styles from '../ContactForm/ContactForm.module.css'\nimport { Loader } from '../Loader/Loader';\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'contactName':\n                setName(value)\n                break;\n            case 'contactNumber':\n                setNumber(value)\n                break;\n            default:\n                setName('')\n                setNumber('')\n        }\n    }\n\n    const dispatch = useDispatch();\n    const {items, addingLoader} = useSelector(getContacts);\n\n    const contactAlreadyExists = (name, number) => {\n        return items.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase());\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (contactAlreadyExists(name, number)) {\n            return toast.error(`${name} is already in Phonebook`)\n        }\n\n        dispatch(addContact({name, number}));\n\n        setName('')\n        setNumber('')\n    }\n\n    const nameId = nanoid();\n    const numberId = nanoid();\n    \n    return (<form onSubmit={handleSubmit} className={styles.insertWrapper}>\n        <label className={styles.label} htmlFor={nameId}>Name</label>\n        <input\n            id={nameId}\n            type=\"text\"\n            name=\"contactName\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Za-яА-Я]+(([' -][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder='Input name'\n            className={styles.input} />\n        <label className={styles.label} htmlFor={numberId}>Number</label>\n        <input\n            id={numberId}\n            type=\"tel\"\n            name=\"contactNumber\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n                placeholder='Input number'\n            className={styles.input} />\n        {addingLoader ?\n            <Loader/> :\n            <button type='submit' className={styles.button}>Add contact</button>\n        }\n    </form>)\n}","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Pnk5T\",\"contactText\":\"ContactItem_contactText__Unqs0\",\"contactBtn\":\"ContactItem_contactBtn__JQaBo\",\"loader\":\"ContactItem_loader__p4N9I\"};","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from '../../../redux/contacts/contactsOperations'; \nimport styles from '../ContactItem/ContactItem.module.css'\n\nexport const ContactItem = ({ data }) => {\n    const dispatch = useDispatch();\n\n    const { id, name, number } = data;\n\n    const onDeleteClick = (e, id) => {\n        if (id === e.target.id) {\n            e.target.textContent = 'Deleting...';\n            e.target.setAttribute('disabled', 'true');\n        }\n        dispatch(removeContact(id))\n    }\n    return (<li className={styles.contactItem}>\n                <p className={styles.contactText}>{name}: {number}</p>\n                <button type='button' className={styles.contactBtn} id={id} onClick={(e) => onDeleteClick(e, id)}>Delete</button>\n            </li>)\n}\n\nContactItem.propTypes = {\n    data: PropTypes.objectOf(PropTypes.string.isRequired,),\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from '../../../redux/contacts/contactsOperations';\nimport { getContacts } from '../../../redux/contacts/contactsSlice';\nimport { getFilter } from '../../../redux/filter/filterSlice';\nimport { ContactItem } from '../ContactItem/ContactItem';\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n\n    const {items, error, isLoading} = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n\n    const getFilteredContacts = () => {\n        if (!filter) {\n            return items;\n        }\n        return items.filter(({name}) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\n    }\n\n    const contactsToRender = getFilteredContacts()\n\n    return <ul style={{ paddingLeft: \"0px\" }}>\n        \n        {isLoading ? <div>Loading...</div> : \n        contactsToRender.map(item =>\n            <ContactItem key={item.id} data={item} />)}\n        {error && <div>Something went wrong, please, try again</div>}\n    </ul>\n}","// extracted by mini-css-extract-plugin\nexport default {\"filterWrapper\":\"Filter_filterWrapper__-LBgt\",\"label\":\"Filter_label__hOULN\",\"input\":\"Filter_input__8EywS\"};","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from '../Filter/Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../../redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filter);\n  \n  const handleChange = (e) => {\n    dispatch(setFilter(e.target.value));\n  }\n  \n  const filterId = nanoid();\n\n  return (<div className={styles.filterWrapper}>\n    <label htmlFor={filterId} className={styles.label}>Find contacts by name</label>\n    <input\n      id={filterId}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      onChange={handleChange}\n      className={styles.input}\n      placeholder='Input name' />\n  </div>);\n};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Phonebook_title__ipARL\"};","import { ContactForm } from './ContactForm/ContactForm';\nimport { ContactList } from './ContactList/ContactList';\nimport { Filter } from './Filter/Filter';\nimport css from './Phonebook.module.css'\n\nconst Phonebook = () => {\n    return <>\n        <h1 className={css.title}>Phonebook</h1>\n        <ContactForm />\n\n        <h2 className={css.title}>Contacts</h2>\n        <Filter />\n        <ContactList />\n    </>\n}\n\nexport default Phonebook","// extracted by mini-css-extract-plugin\nexport default {\"insertWrapper\":\"ContactForm_insertWrapper__ZCraW\",\"label\":\"ContactForm_label__YXYvo\",\"input\":\"ContactForm_input__dxiTT\",\"button\":\"ContactForm_button__nVfZI\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ContactForm","useState","name","setName","number","setNumber","handleChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","nameId","nanoid","numberId","onSubmit","preventDefault","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","className","styles","htmlFor","id","type","onChange","pattern","title","required","placeholder","Loader","ContactItem","data","onClick","textContent","setAttribute","removeContact","onDeleteClick","ContactList","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","style","paddingLeft","map","Filter","state","filterId","setFilter","css","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}